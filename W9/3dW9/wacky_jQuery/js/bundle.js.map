{"version":3,"sources":["./js/main.js","./js/view.js","webpack/bootstrap"],"names":["View","$el","this","setupEasel","window","_randomColorString","Math","random","toString","substr","prototype","exercise0","$","removeClass","exercise1","addClass","exercise2","remove","exercise3","h1","text","append","exercise4","$squares","i","length","textContent","exercise5","on","square","$sq","currentTarget","alert","attr","exercise6","each","idx","ele","css","exercise7","$square","console","log","$addRowButton","html","addRow","bind","j","$button","rowIdx","find","$row","colIdx","e","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","$easel"],"mappings":"UAEIA,E,WCAJ,SAASA,EAAKC,GACZC,KAAKD,IAAMA,EACXC,KAAKC,aAGPC,OAAOC,mBAAqB,WAC1B,MAAO,IAAMC,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAGlDT,EAAKU,UAAUC,UAAY,WAMzBC,EAAE,MAAMC,YAAY,WAGtBb,EAAKU,UAAUI,UAAY,WAIzBF,EAAE,MAAMG,SAAS,WAGnBf,EAAKU,UAAUM,UAAY,WAIzBJ,EAAE,WAAWK,UAGfjB,EAAKU,UAAUQ,UAAY,WAIzB,MAAMC,EAAKP,EAAE,QAAQQ,KAAK,iBAC1BR,EAAE,OAAOS,OAAOF,IAGlBnB,EAAKU,UAAUY,UAAY,WAIzB,MAAMC,EAAWX,EAAE,MACnB,IAAK,IAAIY,EAAE,EAAGA,EAAED,EAASE,OAAQD,IAC3BA,EAAE,GAAM,IAAID,EAASC,GAAGE,YAAc,SAI9C1B,EAAKU,UAAUiB,UAAY,WAQzBf,EAAE,WAAWgB,GAAG,SAASC,IACvB,MAAMC,EAAMlB,EAAEiB,EAAOE,eACrBC,MAAMF,EAAIG,KAAK,iBAInBjC,EAAKU,UAAUwB,UAAY,WAOzBtB,EAAE,WAAWuB,MAAK,CAACC,EAAKC,KACRzB,EAAEyB,GACRC,IAAI,mBAAoBjC,0BAIpCL,EAAKU,UAAU6B,UAAY,WAOzB3B,EAAE,UAAUgB,GAAG,aAAc,WAAWS,IACtC,MAAMG,EAAU5B,EAAEyB,EAAIN,eACtBU,QAAQC,IAAIF,EAAQF,IAAI,yBAM5BtC,EAAKU,UAAUP,WAAa,WAC1B,MAAMwC,EAAgB/B,EAAE,YAAYgC,KAAK,aACzC1C,KAAKD,IAAIoB,OAAOsB,GAChBA,EAAcf,GAAG,QAAS1B,KAAK2C,OAAOC,KAAK5C,OAE3C,IAAI,IAAI6C,EAAI,EAAGA,GAAK,EAAGA,IAAI,CACzB,MAAMC,EAAUpC,EAAE,YAAYgC,KAAK,YAAcG,GACjDC,EAAQpB,GAAG,QAAS1B,KAAK,WAAa6C,IACtC7C,KAAKD,IAAIoB,OAAO2B,GAGlB,IAAI,IAAIxB,EAAI,EAAGA,EAAI,GAAIA,IACrBtB,KAAK2C,UAIT7C,EAAKU,UAAUmC,OAAS,WACtB,MAAMI,EAAS/C,KAAKD,IAAIiD,KAAK,QAAQzB,OAC/B0B,EAAOvC,EAAE,QAAQG,SAAS,OAAOA,SAAS,SAChD,IAAI,IAAIqC,EAAS,EAAGA,EAAS,GAAIA,IAAU,CACzC,MAAMZ,EAAU5B,EAAE,QAAQG,SAAS,UAAUkB,KAAK,WAAY,CAACgB,EAAQG,IACvEZ,EAAQZ,GAAG,cAAeyB,IACRzC,EAAEyC,EAAEtB,eACZO,IAAI,mBAAoBlC,OAAOC,yBAEzC8C,EAAK9B,OAAOmB,GAEdtC,KAAKD,IAAIoB,OAAO8B,IAGlBG,EAAOC,QAAUvD,IC3HbwD,EAA2B,GFC3BxD,EEEJ,SAASyD,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaJ,QAGrB,IAAID,EAASE,EAAyBE,GAAY,CAGjDH,QAAS,IAOV,OAHAM,EAAoBH,GAAUJ,EAAQA,EAAOC,QAASE,GAG/CH,EAAOC,QFnBJ,CAAQ,KAEnB3C,GAAE,WACA,IAAIkD,EAASlD,EAAE,UACf,IAAIZ,EAAK8D,O","file":"bundle.js","sourcesContent":["/* globals $ */\n\nvar View = require(\"./view\");\n\n$(function () {\n  var $easel = $(\"#easel\");\n  new View($easel);\n});\n","/* jshint esversion: 6 */\n\nfunction View($el) {\n  this.$el = $el;\n  this.setupEasel();\n}\n\nwindow._randomColorString = function(){\n  return '#' + Math.random().toString(16).substr(-6);\n};\n\nView.prototype.exercise0 = function () {\n  //Challenge: (example) remove the 'square' class from every li\n  //Result: this should cause the grid to turn into a long list of undecorated lis\n  //just a list of dots\n\n  //this one completed as an example :) no additional code necessary\n  $('li').removeClass(\"square\");\n};\n\nView.prototype.exercise1 = function () {\n  //Challenge: Give every square the class 'orange'\n  //Result: Every square should turn orange (we already have a CSS rule)\n\n  $('li').addClass('orange');\n};\n\nView.prototype.exercise2 = function () {\n  //Challenge: Remove every square\n  //Result: Every square vanishes\n\n  $('.square').remove();\n};\n\nView.prototype.exercise3 = function () {\n  //Challenge: Add an <h1> with the text 'i love jquery' under the grid.\n  //Result: An <h1> with the text 'i love jquery' appears under the grid.\n\n  const h1 = $('<h1>').text(\"i love jquery\");\n  $('div').append(h1);\n};\n\nView.prototype.exercise4 = function () {\n  //Challenge: Write your first name in every other square.\n  //Result: Your name appears in every other square.\n\n  const $squares = $('li');\n  for (let i=0; i<$squares.length; i++) {\n    if (i%2 !== 0) {$squares[i].textContent = 'Mous'};\n  }\n};\n\nView.prototype.exercise5 = function () {\n  //Challenge: Alert the row and column of the square, when the square is clicked.\n  //Result: When a square is clicked, the row and column appear in an alert. for\n  //example: clicking the top left square should alert '0, 0'.\n\n  //hint: checkout the addRow function at the bottom of the file: we set the\n  //  'data-pos' of every square\n\n  $('.square').on(\"click\", square => {\n    const $sq = $(square.currentTarget);\n    alert($sq.attr(\"data-pos\"));\n  });\n};\n\nView.prototype.exercise6 = function () {\n  //Challenge: Give every square a random color!\n  //Result: Every square becomes a color as soon as this code runs. The grid\n  //should become a beautiful rainbow of colors.\n\n  //hint: use window._randomColorString() (defined at top) to get a random color!\n\n  $('.square').each((idx, ele) => {\n    var $square = $(ele);\n    $square.css(\"background-color\", _randomColorString());\n  })\n};\n\nView.prototype.exercise7 = function(){\n  //Challenge: When your mouse goes over a square, console log its color.\n  //Result: When the mouse goes over a square its color should appear in the\n  //console. The color won't be the color's name, but its rbg value.\n  //You should push the button for exercise 6 first to try it on the\n  //rainbow.\n\n  $('#easel').on(\"mouseenter\", \".square\", ele => {\n    const $square = $(ele.currentTarget);\n    console.log($square.css(\"background-color\"));\n  });\n};\n\n\n\nView.prototype.setupEasel = function() {\n  const $addRowButton = $('<button>').html('Add a row');\n  this.$el.append($addRowButton);\n  $addRowButton.on(\"click\", this.addRow.bind(this));\n\n  for(let j = 0; j <= 7; j++){\n    const $button = $(\"<button>\").html(\"Exercise \" + j);\n    $button.on(\"click\", this[\"exercise\" + j]);\n    this.$el.append($button);\n  }\n\n  for(let i = 0; i < 20; i ++) {\n    this.addRow();\n  }\n};\n\nView.prototype.addRow = function() {\n  const rowIdx = this.$el.find(\".row\").length;\n  const $row = $(\"<ul>\").addClass(\"row\").addClass(\"group\");\n  for(let colIdx = 0; colIdx < 20; colIdx++) {\n    const $square = $(\"<li>\").addClass(\"square\").attr(\"data-pos\", [rowIdx, colIdx]);\n    $square.on(\"mouseenter\", (e) => {\n      const $square = $(e.currentTarget);\n      $square.css(\"background-color\", window._randomColorString());\n    });\n    $row.append($square);\n  }\n  this.$el.append($row);\n};\n\nmodule.exports = View;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"sourceRoot":""}